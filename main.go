package main

import (
	"fmt"
	"log"
	"math/rand"
	"os"
	"time"

	"github.com/joho/godotenv"

	"email_sender/config"
	"email_sender/db"
	"email_sender/email"
)

func main() {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ .env
	cwd, err := os.Getwd()
	if err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: %v", err)
	}

	envPath := cwd + "/.env"
	if err := godotenv.Load(envPath); err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env –ø–æ –ø—É—Ç–∏ %s: %v", envPath, err)
	}
	config.Init()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ SMTP-–Ω–∞—Å—Ç—Ä–æ–µ–∫
	if config.FromEmail == "" || config.SMTPUser == "" || config.SMTPPass == "" {
		log.Fatal("‚ùå SMTP-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å .env –∏–ª–∏ config/config.go")
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
	logFile, err := os.OpenFile("logs/email_sender.log", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
	if err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ª–æ–≥-—Ñ–∞–π–ª: %v", err)
	}
	defer logFile.Close()
	log.SetOutput(logFile)

	log.Println("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏...")

	rand.Seed(time.Now().UnixNano())

	database := db.InitDB()
	defer database.Close()

	entrepreneurs := db.GetPendingEntrepreneurs(10)
	if len(entrepreneurs) == 0 {
		log.Println("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º.")
		return
	}

	tmpl, err := email.LoadTemplate("templates/base.html")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞: %v", err)
	}

	for _, e := range entrepreneurs {
		fullName := fmt.Sprintf("%s %s %s", e.LastName, e.FirstName, e.MiddleName)
		log.Printf("‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∏—Å—å–º–∞ –¥–ª—è: %s <%s>", fullName, e.Email)

		body, err := email.RenderTemplate(tmpl, fullName)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è ID %d: %v", e.ID, err)
			db.MarkAsError(e.ID, err.Error())
			continue
		}

		err = email.SendEmail(config.FromEmail, e.Email, "–ò–ò –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ ‚Äî SmartStack.AI", body)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ ID %d (%s): %v", e.ID, e.Email, err)
			db.MarkAsError(e.ID, err.Error())
			continue
		}

		log.Printf("‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %s", e.Email)
		db.MarkAsSent(e.ID)

		// –†–∞–Ω–¥–æ–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 5 –¥–æ 120 –º–∏–Ω—É—Ç
		minDelay := 5   // –º–∏–Ω—É—Ç
		maxDelay := 120 // –º–∏–Ω—É—Ç

		delayMinutes := minDelay + rand.Intn(maxDelay-minDelay+1)
		delay := time.Duration(delayMinutes) * time.Minute

		log.Printf("üïí –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π: %v", delay)
		time.Sleep(delay)
	}

	log.Println("üéâ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
}
